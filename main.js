// // üîµThe working of the JavaScript works on three phases:
// // 1. Global Execution Context
// // 2. Memory phase / Creation phase
// // 3. Execution phase




// // üîµPhase 1: Global Execution Context
// // The value of `this` keyword is set to Global Execution Context (which is an empty Object in NODE environment, & window object in browser environment)
// // // ‡§∏‡§Æ‡§ù‡§ø‡§è ‡§ï‡§ø ‡§ú‡§¨ JavaScript ‡§ï‡•ã‡§° ‡§ö‡§≤‡§§‡§æ ‡§π‡•à, ‡§§‡•ã ‡§â‡§∏‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï Execution Context ‡§¨‡§®‡§æ‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§ ‡§∏‡§¨‡§∏‡•á ‡§™‡§π‡§≤‡§æ Execution Context ‡§ú‡•ã ‡§¨‡§®‡§§‡§æ ‡§π‡•à, ‡§â‡§∏‡•á Global Execution Context ‡§ï‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§

// üîµPhase 2: Memory phase
// During this phase, JS engine scans the code and assigns the initial values for the variables , functions, etc.. For variables they are 'undefined' and for functions they are set to their function definition

// ‡§ú‡§¨ JavaScript ‡§ï‡•ã‡§° execute ‡§π‡•ã‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§π‡•ã‡§§‡§æ ‡§π‡•à, ‡§â‡§∏‡§∏‡•á ‡§™‡§π‡§≤‡•á Memory Phase (‡§ú‡§ø‡§∏‡•á "Creation Phase" ‡§≠‡•Ä ‡§ï‡§π‡§§‡•á ‡§π‡•à‡§Ç) ‡§Ü‡§§‡•Ä ‡§π‡•à‡•§ ‡§á‡§∏ ‡§¶‡•å‡§∞‡§æ‡§® JavaScript Engine ‡§Ü‡§™‡§ï‡•á ‡§ï‡•ã‡§° ‡§ï‡•ã ‡§∏‡•ç‡§ï‡•à‡§® ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§î‡§∞ ‡§∏‡§≠‡•Ä variables, functions, ‡§Ü‡§¶‡§ø ‡§ï‡•á ‡§≤‡§ø‡§è memory allocate ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§ 
// Memory Phase ‡§µ‡§π ‡§∏‡•ç‡§ü‡•á‡§ú ‡§π‡•à, ‡§ú‡§¨ JavaScript Engine ‡§∏‡§≠‡•Ä variables ‡§î‡§∞ functions ‡§ï‡•ã memory ‡§Æ‡•á‡§Ç reserve ‡§ï‡§∞ ‡§≤‡•á‡§§‡§æ ‡§π‡•à, ‡§≤‡•á‡§ï‡§ø‡§® ‡§â‡§®‡•ç‡§π‡•á‡§Ç execute ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡§æ‡•§
// Variables:
// var: Memory ‡§Æ‡•á‡§Ç "undefined" ‡§ï‡•á ‡§∏‡§æ‡§• store ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§
// let/const: Memory ‡§Æ‡•á‡§Ç store ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç, ‡§≤‡•á‡§ï‡§ø‡§® "initialized" ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§§‡•á (TDZ ‡§Æ‡•á‡§Ç ‡§∞‡§π‡§§‡•á ‡§π‡•à‡§Ç)‡•§
// Functions: ‡§â‡§®‡§ï‡•Ä ‡§™‡•Ç‡§∞‡•Ä definition memory ‡§Æ‡•á‡§Ç save ‡§π‡•ã ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à‡•§





// üîµPhase 3: Execution phase
// After the creation phase completed, the execution phase begins where actual values of the variables are set. And when the functions are called it creates a new 'Function Execution' context which consists of two phases (they works same as explained above but only for the particular function scope):
// 1. Memory phase 
// 2. Execution phase 
// üìùThe return value of the 'Function Execution' context is passed to the Global Execution Context

// Execution Phase ‡§Æ‡•á‡§Ç ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•ã‡§§‡§æ ‡§π‡•à?
// Global Scope ‡§Æ‡•á‡§Ç Execution:
// JavaScript top-to-bottom ‡§≤‡§æ‡§á‡§® ‡§¨‡§æ‡§à ‡§≤‡§æ‡§á‡§® ‡§ï‡•ã‡§° execute ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
// Variables ‡§ï‡•ã ‡§â‡§®‡§ï‡•Ä actual values assign ‡§ï‡•Ä ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à‡§Ç‡•§
// Functions ‡§ï‡•ã call ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§ ‡§ú‡§¨ ‡§ï‡•ã‡§à function call ‡§π‡•ã‡§§‡§æ ‡§π‡•à, ‡§§‡•ã ‡§â‡§∏‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§®‡§Ø‡§æ Function Execution Context ‡§¨‡§®‡§æ‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§
// Function Execution Context ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?
// ‡§ú‡§¨ ‡§≠‡•Ä ‡§ï‡•ã‡§à function call ‡§π‡•ã‡§§‡§æ ‡§π‡•à, ‡§§‡•ã JavaScript ‡§â‡§∏‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§≤‡§ó ‡§∏‡•á ‡§è‡§ï execution environment ‡§¨‡§®‡§æ‡§§‡§æ ‡§π‡•à, ‡§ú‡§ø‡§∏‡•á Function Execution Context ‡§ï‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§Ø‡§π context ‡§≠‡•Ä ‡§¶‡•ã phases ‡§Æ‡•á‡§Ç ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à (‡§ú‡•à‡§∏‡•á Global Execution Context):

// Memory Phase:
// Function ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞ declare ‡§π‡•Å‡§è variables ‡§î‡§∞ functions ‡§ï‡•á ‡§≤‡§ø‡§è memory allocate ‡§ï‡•Ä ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à‡•§
// Variables ‡§ï‡•ã "undefined" ‡§î‡§∞ functions ‡§ï‡•ã ‡§â‡§®‡§ï‡•Ä ‡§™‡•Ç‡§∞‡•Ä definition ‡§¶‡•Ä ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à‡•§
// Execution Phase:
// Variables ‡§ï‡•ã ‡§â‡§®‡§ï‡•Ä actual values assign ‡§ï‡•Ä ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à‡§Ç‡•§
// Function ‡§ï‡•á instructions (statements) execute ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç‡•§

// ‡§Æ‡§æ‡§® ‡§≤‡•ã, Global Execution Context ‡§è‡§ï ‡§Æ‡•à‡§®‡•á‡§ú‡§∞ ‡§π‡•à‡•§

// ‡§ú‡§¨ ‡§Æ‡•à‡§®‡•á‡§ú‡§∞ ‡§ï‡§ø‡§∏‡•Ä worker (function) ‡§ï‡•ã ‡§ï‡§æ‡§Æ ‡§∏‡•å‡§Ç‡§™‡§§‡§æ ‡§π‡•à, ‡§§‡•ã worker ‡§Ö‡§™‡§®‡•á task (execution context) ‡§ï‡•ã independently ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
// Task ‡§ñ‡§§‡•ç‡§Æ ‡§π‡•ã‡§®‡•á ‡§™‡§∞ worker result ‡§Æ‡•à‡§®‡•á‡§ú‡§∞ (Global Context) ‡§ï‡•ã ‡§µ‡§æ‡§™‡§∏ ‡§¶‡•á ‡§¶‡•á‡§§‡§æ ‡§π‡•à‡•§
// // Global  Excecution  or Global enviroment 
// // =================================================================
// // Jab b code excetue hota hai chahe vo kitna b bda ho or kitna b chota ho  to global Excecution se run hota hai to sbse phle usko allocate kiya jata hai (This) k ander ---or ye chize to honi he honi hai 


let a = 10;
let b = 20;
function add (num1, num2){
    let sum = num1 + num2;
    return sum;
}

let result = add(a , b);
console.log(result); // 30
let result2 = add(25 , 25);
console.log(result2); // 50